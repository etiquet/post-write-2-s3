    # Define the variable based on the X-Forwarded-For header
    # /!\not the latest version
    # you may need to tweak the version regarding your environment and witch header to look for...

    map $http_x_original_forwarded_for $allow_proxy_pass {
        default 0;
        "~*82\.64\.241\.24" 1;
        "~*8\.211\.33\.110" 1;
        "~*8\.211\.33\.111" 1;
    }

    upstream backend {
      server cnsc-s3-app-s3-upload-app:80;
    }

    log_format mylog '$remote_addr - [$time_local] '
        '"$request" $status $body_bytes_sent '
        '"$http_referer" "$http_user_agent" "$content_type" "$http_X-Api-Key" "$http_x_forwarded_for" "$http_x_original_forwarded_for"'
        '"$request_body" ' ;

    server {
      listen 0.0.0.0:8080;
      server_name _;

      location /ODFClient {

        if ($request_method = GET) {
          return 200 'get-gnam style!';
        }

        if ($request_method != POST) {
          return 405;
        }

        if ($allow_proxy_pass = 0) {
            return 333 'devil/2'; # Interdit l'accès si l'IP n'est pas autorisée
        }

        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_pass_request_headers      on;
        access_log  /dev/stdout mylog;
        proxy_pass http://backend ;  
               
      }

      location /success {
        return 200 'post received!';
      }

    }




# Define the variable based on the X-Forwarded-For header
map $http_x_apikey $api_realm {
  default "";
  include /dso/nginx/api_keys;
}

# Define the variable based on the X-Forwarded-For header
map $http_x_forwarded_for $ip_allowed {
        default 0;
        "~*8\.211\.33\.110" 1;
        "~*8\.211\.33\.111" 1;
        "~*82\.64\.241\.24" 1;
    }

upstream backend {
    server cnsc-s3-app-s3-upload-app:80;
}
server {
  listen 0.0.0.0:8080;
  server_name _;

  location /ODFClient {
    # Check if the IP is in the X-Forwarded-For header
    if ($ip_allowed) {
        proxy_pass http://backend; # Allow access
    }

    return 403;  
    }
}


 